// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../frisbee

import Frisbee from 'frisbee';

import 'isomorphic-fetch';
export const service: Frisbee;

export namespace Projects {
    function getAll(visibity?: Visibility, owned?: boolean, membership?: boolean, sort?: SortOrder, orderby?: Orderby, search?: string): Promise<Project[]>;
    function getOne(id: string): Promise<Project>;
}

export namespace Issues {
    function getAll(state?: State, scope?: Scope, labels?: string[], milestoneTitle?: string, orderBy?: (Orderby.CREATED_AT | Orderby.UPDATED_AT), sort?: SortOrder, search?: string, milestoneIds?: string[], authoredBy?: string, assignedTo?: string): Promise<Issue[]>;
    function getAllOfProject(projectId: string, state?: State, scope?: Scope, labels?: string[], milestoneTitle?: string, sort?: SortOrder, search?: string, milestoneIds?: string[], authoredBy?: string, assignedTo?: string): Promise<Issue[]>;
    function getOneOfProject(projectId: string, issueId: string): Promise<Issue[]>;
    function create(projectId: string, title: string, description?: string, confidential?: boolean, assigneeIds?: string[], milestoneId?: string, labels?: string[], dueDate?: Date): Promise<Issue>;
    function edit(projectId: string, issueId: string, title?: string, description?: string, confidential?: boolean, assigneeIds?: string[], milestoneId?: string, labels?: string[], dueDate?: Date, event?: 'reopen' | 'close'): Promise<Issue>;
    function deleteOne(projectId: string, issueId: string): Promise<Issue>;
}

export namespace Labels {
    function getAll(projectId: string): Promise<Label[]>;
    function create(projectId: string, name: string, color: string, description?: string): Promise<Label>;
}

export interface Project {
    id: string;
    name: string;
}
export interface Milestone {
    id: string;
    title: string;
    description?: string;
    startDate?: Date;
    dueDate?: Date;
}
export interface Issue {
    id: string;
    iid: string;
    title: string;
    labels?: string[];
    createdAt?: Date;
    updatedAt?: Date;
    dueDate?: Date;
    state?: string;
    progress?: TimeStatus;
}
export interface TimeStatus {
    spentTime?: number;
    estimatedTime?: number;
    spentTimeSting?: string;
    estimatedTimeString?: string;
}
export interface Note {
    id?: string;
    body?: string;
    createdAt?: Date;
    system?: boolean;
}
export interface Label {
    id: string;
    name: string;
    color?: string;
    description?: string;
}

export enum Visibility {
    PUBLIC = "public",
    INTERNAL = "internal",
    PRIVATE = "private",
}
export enum Orderby {
    ID = "id",
    NAME = "name",
    PATH = "path",
    CREATED_AT = "created_at",
    UPDATED_AT = "updated_at",
    LAST_ACTIVITY_AT = "last_activity_at",
}
export enum SortOrder {
    ASCENDING = "asc",
    DESCENDING = "desc",
}
export enum State {
    OPENED = "opened",
    CLOSED = "closed",
}
export enum Scope {
    ALL = "all",
    ASSIGNED_TO_ME = "assigned_to_me",
    CREATED_BY_ME = "created_by_me",
}

